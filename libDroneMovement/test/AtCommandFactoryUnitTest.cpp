/*
 * Copyright 2014 Jules Cl√©ro
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "libDroneMovement/AtCommandFactory.hpp"
#include <gtest/gtest.h>

namespace ghost
{
namespace libDroneMovement
{

class AtCommandFactoryTest : public testing::Test
{
protected:
    /** Factory used during tests */
    AtCommandFactory factory;
};


TEST_F(AtCommandFactoryTest, takeOffCommand)
{
    EXPECT_EQ(factory.takeOffCommand(), "AT*REF=1,290718208\r");
}

TEST_F(AtCommandFactoryTest, landCommand)
{
    EXPECT_EQ(factory.landCommand(), "AT*REF=1,290717696\r");
}

TEST_F(AtCommandFactoryTest, emergencyCommand)
{
    EXPECT_EQ(factory.emergencyCommand(), "AT*REF=1,290717952\r");
}

TEST_F(AtCommandFactoryTest, hoveringCommand)
{
    EXPECT_EQ(factory.hoveringCommand(), "AT*PCMD=1,0,0,0,0,0\r");
}

TEST_F(AtCommandFactoryTest, movementCommand)
{
    /*
     * Used floating point parameters:
     *
     * -1082130432 : -1
     * -1086324736 : -0.75
     * -1090519040 : -0.5
     * -1098907648 : -0.25
     *  0
     *  1048576000 : 0.25
     *  1056964608 : 0.5
     *  1061158912 : 0.75
     *  1065353216 : 1
     */

    // Roll at 0,25% of the max power
    EXPECT_EQ(factory.movementCommand(0.25, 0, 0, 0), "AT*PCMD=1,1,1048576000,0,0,0\r");
    // Pitch at 0,5% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0.5, 0, 0), "AT*PCMD=2,1,0,1056964608,0,0\r");
    // Gaz at 0,75% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, 0.75, 0), "AT*PCMD=3,1,0,0,1061158912,0\r");
    // Yaw at 100% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, 0, 1), "AT*PCMD=4,1,0,0,0,1065353216\r");

    // Roll at -100% of the max power
    EXPECT_EQ(factory.movementCommand(-1, 0, 0, 0), "AT*PCMD=5,1,-1082130432,0,0,0\r");
    // Pitch at -0.75% of the max power
    EXPECT_EQ(factory.movementCommand(0, -0.75, 0, 0), "AT*PCMD=6,1,0,-1086324736,0,0\r");
    // Gaz at -0.5% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, -0.5, 0), "AT*PCMD=7,1,0,0,-1090519040,0\r");
    // Yaw at -0.25% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, 0, -0.25), "AT*PCMD=8,1,0,0,0,-1098907648\r");

    // Combined
    EXPECT_EQ(
        factory.movementCommand(0.5, 1, -0.25, 0.5),
        "AT*PCMD=9,1,1056964608,1065353216,-1098907648,1056964608\r");
}

TEST_F(AtCommandFactoryTest, movementCommandWithAutoGeneratedYaw)
{
    // Roll at 0,25% of the max power
    EXPECT_EQ(factory.movementCommand(0.25, 0, 0), "AT*PCMD=1,3,1048576000,0,0,0\r");
    // Pitch at 0,5% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0.5, 0), "AT*PCMD=2,3,0,1056964608,0,0\r");
    // Gaz at 0,75% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, 0.75), "AT*PCMD=3,3,0,0,1061158912,0\r");

    // Roll at -100% of the max power
    EXPECT_EQ(factory.movementCommand(-1, 0, 0), "AT*PCMD=4,3,-1082130432,0,0,0\r");
    // Pitch at -0.75% of the max power
    EXPECT_EQ(factory.movementCommand(0, -0.75, 0), "AT*PCMD=5,3,0,-1086324736,0,0\r");
    // Gaz at -0.5% of the max power
    EXPECT_EQ(factory.movementCommand(0, 0, -0.5), "AT*PCMD=6,3,0,0,-1090519040,0\r");

    // Combined
    EXPECT_EQ(
        factory.movementCommand(0.5, 1, -0.25),
        "AT*PCMD=7,3,1056964608,1065353216,-1098907648,0\r");
}

TEST_F(AtCommandFactoryTest, movementWithMagnetoCommand)
{
    // Combined
    EXPECT_EQ(
        factory.movementWithMagnetoCommand(0.5, 1, -0.25, 0.5, -0.25, 0.75),
        "AT*PCMD_MAG=1,1,1056964608,1065353216,-1098907648,1056964608,-1098907648,1061158912\r");
}

TEST_F(AtCommandFactoryTest, movementWithMagnetoCommandWithAutoGeneratedYaw)
{
    // Combined
    EXPECT_EQ(
        factory.movementWithMagnetoCommand(0.5, 1, -0.25, 0.5, 1),
        "AT*PCMD_MAG=1,3,1056964608,1065353216,-1098907648,0,1056964608,1065353216\r");
}

TEST_F(AtCommandFactoryTest, resetWatchdogCommand)
{
    EXPECT_EQ(factory.resetWatchdogCommand(), "AT*COMWDG=1\r");
}

TEST_F(AtCommandFactoryTest, horizontalPlaneCalibrationCommand)
{
    EXPECT_EQ(factory.horizontalPlaneCalibrationCommand(), "AT*FTRIM=1\r");
}

TEST_F(AtCommandFactoryTest, magnetoCalibrationCommand)
{
    EXPECT_EQ(factory.magnetoCalibrationCommand(), "AT*CALIB=1,0\r");
}

TEST_F(AtCommandFactoryTest, configureCommand)
{
    EXPECT_EQ(
        factory.configureCommand("control:altitude_max", "2000"),
        "AT*CONFIG_IDS=1,\"00000000\",\"00000000\",\"00000000\"\rAT*CONFIG=2,\"control:altitude_max\",\"2000\"\r");

    // Flip right command
    EXPECT_EQ(
        factory.configureCommand("control:flight_anim", "19,15"),
        "AT*CONFIG_IDS=3,\"00000000\",\"00000000\",\"00000000\"\rAT*CONFIG=4,\"control:flight_anim\",\"19,15\"\r");

    // Led Anim (blink green)
    EXPECT_EQ(
        factory.configureCommand("leds:leds_anim", "0,1073741824,2"),
        "AT*CONFIG_IDS=5,\"00000000\",\"00000000\",\"00000000\"\rAT*CONFIG=6,\"leds:leds_anim\",\"0,1073741824,2\"\r");
}

} /* ghost namespace */
} /* libDroneMovement namespace  */
